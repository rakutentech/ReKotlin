[{"name":"abstract fun <ChildState> childStore(childReducer: Reducer<ChildState>, initialChildState: ChildState? = null): Store<Pair<State, ChildState>>","description":"org.rekotlin.RootStore.childStore","location":"rekotlin/org.rekotlin/-root-store/child-store.html","searchKeys":["childStore","abstract fun <ChildState> childStore(childReducer: Reducer<ChildState>, initialChildState: ChildState? = null): Store<Pair<State, ChildState>>","org.rekotlin.RootStore.childStore"]},{"name":"abstract fun <E : Effect> subscribe(listener: Listener<E>, selector: (Effect) -> E?)","description":"org.rekotlin.SubscribeStore.subscribe","location":"rekotlin/org.rekotlin/-subscribe-store/subscribe.html","searchKeys":["subscribe","abstract fun <E : Effect> subscribe(listener: Listener<E>, selector: (Effect) -> E?)","org.rekotlin.SubscribeStore.subscribe"]},{"name":"abstract fun <E : Effect> unsubscribe(listener: Listener<E>)","description":"org.rekotlin.SubscribeStore.unsubscribe","location":"rekotlin/org.rekotlin/-subscribe-store/unsubscribe.html","searchKeys":["unsubscribe","abstract fun <E : Effect> unsubscribe(listener: Listener<E>)","org.rekotlin.SubscribeStore.unsubscribe"]},{"name":"abstract fun <S : Subscriber<State>> subscribe(subscriber: S)","description":"org.rekotlin.SubscribeStore.subscribe","location":"rekotlin/org.rekotlin/-subscribe-store/subscribe.html","searchKeys":["subscribe","abstract fun <S : Subscriber<State>> subscribe(subscriber: S)","org.rekotlin.SubscribeStore.subscribe"]},{"name":"abstract fun <SelectedState, S : Subscriber<SelectedState>> subscribe(subscriber: S, selector: Subscription<State>.() -> Subscription<SelectedState>)","description":"org.rekotlin.SubscribeStore.subscribe","location":"rekotlin/org.rekotlin/-subscribe-store/subscribe.html","searchKeys":["subscribe","abstract fun <SelectedState, S : Subscriber<SelectedState>> subscribe(subscriber: S, selector: Subscription<State>.() -> Subscription<SelectedState>)","org.rekotlin.SubscribeStore.subscribe"]},{"name":"abstract fun <SelectedState> unsubscribe(subscriber: Subscriber<SelectedState>)","description":"org.rekotlin.SubscribeStore.unsubscribe","location":"rekotlin/org.rekotlin/-subscribe-store/unsubscribe.html","searchKeys":["unsubscribe","abstract fun <SelectedState> unsubscribe(subscriber: Subscriber<SelectedState>)","org.rekotlin.SubscribeStore.unsubscribe"]},{"name":"abstract fun dispatch(dispatchable: Dispatchable)","description":"org.rekotlin.DispatchStore.dispatch","location":"rekotlin/org.rekotlin/-dispatch-store/dispatch.html","searchKeys":["dispatch","abstract fun dispatch(dispatchable: Dispatchable)","org.rekotlin.DispatchStore.dispatch"]},{"name":"abstract fun invoke(dispatch: DispatchFunction, getState: () -> State?)","description":"org.rekotlin.Thunk.invoke","location":"rekotlin/org.rekotlin/-thunk/invoke.html","searchKeys":["invoke","abstract fun invoke(dispatch: DispatchFunction, getState: () -> State?)","org.rekotlin.Thunk.invoke"]},{"name":"abstract fun newState(state: State)","description":"org.rekotlin.Subscriber.newState","location":"rekotlin/org.rekotlin/-subscriber/new-state.html","searchKeys":["newState","abstract fun newState(state: State)","org.rekotlin.Subscriber.newState"]},{"name":"abstract fun onEffect(effect: Effect)","description":"org.rekotlin.Listener.onEffect","location":"rekotlin/org.rekotlin/-listener/on-effect.html","searchKeys":["onEffect","abstract fun onEffect(effect: Effect)","org.rekotlin.Listener.onEffect"]},{"name":"abstract fun subscribe(listener: Listener<Effect>)","description":"org.rekotlin.SubscribeStore.subscribe","location":"rekotlin/org.rekotlin/-subscribe-store/subscribe.html","searchKeys":["subscribe","abstract fun subscribe(listener: Listener<Effect>)","org.rekotlin.SubscribeStore.subscribe"]},{"name":"abstract val dispatchFunction: DispatchFunction","description":"org.rekotlin.DispatchStore.dispatchFunction","location":"rekotlin/org.rekotlin/-dispatch-store/dispatch-function.html","searchKeys":["dispatchFunction","abstract val dispatchFunction: DispatchFunction","org.rekotlin.DispatchStore.dispatchFunction"]},{"name":"abstract val state: State","description":"org.rekotlin.Store.state","location":"rekotlin/org.rekotlin/-store/state.html","searchKeys":["state","abstract val state: State","org.rekotlin.Store.state"]},{"name":"class Subscription<State>","description":"org.rekotlin.Subscription","location":"rekotlin/org.rekotlin/-subscription/index.html","searchKeys":["Subscription","class Subscription<State>","org.rekotlin.Subscription"]},{"name":"fun <SelectedState> select(selector: State.() -> SelectedState): Subscription<SelectedState>","description":"org.rekotlin.Subscription.select","location":"rekotlin/org.rekotlin/-subscription/select.html","searchKeys":["select","fun <SelectedState> select(selector: State.() -> SelectedState): Subscription<SelectedState>","org.rekotlin.Subscription.select"]},{"name":"fun <State> compositeStore(vararg stores: Store<*>, middleware: List<Middleware<State>> = emptyList(), skipRepeats: Boolean = true, compose: Compose<State>): Store<State>","description":"org.rekotlin.compositeStore","location":"rekotlin/org.rekotlin/composite-store.html","searchKeys":["compositeStore","fun <State> compositeStore(vararg stores: Store<*>, middleware: List<Middleware<State>> = emptyList(), skipRepeats: Boolean = true, compose: Compose<State>): Store<State>","org.rekotlin.compositeStore"]},{"name":"fun <State> rootStore(reducer: Reducer<State>, state: State? = null, vararg middleware: Middleware<State> = arrayOf()): RootStore<State>","description":"org.rekotlin.rootStore","location":"rekotlin/org.rekotlin/root-store.html","searchKeys":["rootStore","fun <State> rootStore(reducer: Reducer<State>, state: State? = null, vararg middleware: Middleware<State> = arrayOf()): RootStore<State>","org.rekotlin.rootStore"]},{"name":"fun <State> store(reducer: Reducer<State>, state: State? = null, vararg middleware: Middleware<State> = arrayOf()): Store<State>","description":"org.rekotlin.store","location":"rekotlin/org.rekotlin/store.html","searchKeys":["store","fun <State> store(reducer: Reducer<State>, state: State? = null, vararg middleware: Middleware<State> = arrayOf()): Store<State>","org.rekotlin.store"]},{"name":"fun <State> thunk(body: (DispatchFunction, getState: () -> State?) -> Unit): Thunk<State>","description":"org.rekotlin.thunk","location":"rekotlin/org.rekotlin/thunk.html","searchKeys":["thunk","fun <State> thunk(body: (DispatchFunction, getState: () -> State?) -> Unit): Thunk<State>","org.rekotlin.thunk"]},{"name":"fun <State> thunkMiddleware(): Middleware<State>","description":"org.rekotlin.thunkMiddleware","location":"rekotlin/org.rekotlin/thunk-middleware.html","searchKeys":["thunkMiddleware","fun <State> thunkMiddleware(): Middleware<State>","org.rekotlin.thunkMiddleware"]},{"name":"fun only(condition: (State, State) -> Boolean): Subscription<State>","description":"org.rekotlin.Subscription.only","location":"rekotlin/org.rekotlin/-subscription/only.html","searchKeys":["only","fun only(condition: (State, State) -> Boolean): Subscription<State>","org.rekotlin.Subscription.only"]},{"name":"fun skip(condition: (State, State) -> Boolean): Subscription<State>","description":"org.rekotlin.Subscription.skip","location":"rekotlin/org.rekotlin/-subscription/skip.html","searchKeys":["skip","fun skip(condition: (State, State) -> Boolean): Subscription<State>","org.rekotlin.Subscription.skip"]},{"name":"inline fun <E : Effect> listener(crossinline block: (E) -> Unit): Listener<E>","description":"org.rekotlin.listener","location":"rekotlin/org.rekotlin/listener.html","searchKeys":["listener","inline fun <E : Effect> listener(crossinline block: (E) -> Unit): Listener<E>","org.rekotlin.listener"]},{"name":"inline fun <S1, S2, S3, S4, S5, S6, S7, S8, S9, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, store7: Store<S7>, store8: Store<S8>, store9: Store<S9>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6, S7, S8, S9) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, S3, S4, S5, S6, S7, S8, S9, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, store7: Store<S7>, store8: Store<S8>, store9: Store<S9>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6, S7, S8, S9) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, S2, S3, S4, S5, S6, S7, S8, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, store7: Store<S7>, store8: Store<S8>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6, S7, S8) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, S3, S4, S5, S6, S7, S8, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, store7: Store<S7>, store8: Store<S8>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6, S7, S8) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, S2, S3, S4, S5, S6, S7, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, store7: Store<S7>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6, S7) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, S3, S4, S5, S6, S7, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, store7: Store<S7>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6, S7) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, S2, S3, S4, S5, S6, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, S3, S4, S5, S6, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, store6: Store<S6>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5, S6) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, S2, S3, S4, S5, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, S3, S4, S5, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, store5: Store<S5>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4, S5) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, S2, S3, S4, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, S3, S4, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, store4: Store<S4>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3, S4) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, S2, S3, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, S3, State> composeStores(store1: Store<S1>, store2: Store<S2>, store3: Store<S3>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2, S3) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, S2, State> composeStores(store1: Store<S1>, store2: Store<S2>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2) -> State): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, S2, State> composeStores(store1: Store<S1>, store2: Store<S2>, vararg middleware: Middleware<State>, crossinline compose: (S1, S2) -> State): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S1, State> composeStores(store1: Store<S1>, vararg middleware: Middleware<State>, crossinline compose: (S1) -> State = { it as State }): Store<State>","description":"org.rekotlin.composeStores","location":"rekotlin/org.rekotlin/compose-stores.html","searchKeys":["composeStores","inline fun <S1, State> composeStores(store1: Store<S1>, vararg middleware: Middleware<State>, crossinline compose: (S1) -> State = { it as State }): Store<State>","org.rekotlin.composeStores"]},{"name":"inline fun <S> subscriber(crossinline block: (S) -> Unit): Subscriber<S>","description":"org.rekotlin.subscriber","location":"rekotlin/org.rekotlin/subscriber.html","searchKeys":["subscriber","inline fun <S> subscriber(crossinline block: (S) -> Unit): Subscriber<S>","org.rekotlin.subscriber"]},{"name":"interface Action : Dispatchable","description":"org.rekotlin.Action","location":"rekotlin/org.rekotlin/-action/index.html","searchKeys":["Action","interface Action : Dispatchable","org.rekotlin.Action"]},{"name":"interface DispatchStore","description":"org.rekotlin.DispatchStore","location":"rekotlin/org.rekotlin/-dispatch-store/index.html","searchKeys":["DispatchStore","interface DispatchStore","org.rekotlin.DispatchStore"]},{"name":"interface Dispatchable","description":"org.rekotlin.Dispatchable","location":"rekotlin/org.rekotlin/-dispatchable/index.html","searchKeys":["Dispatchable","interface Dispatchable","org.rekotlin.Dispatchable"]},{"name":"interface Effect : Dispatchable","description":"org.rekotlin.Effect","location":"rekotlin/org.rekotlin/-effect/index.html","searchKeys":["Effect","interface Effect : Dispatchable","org.rekotlin.Effect"]},{"name":"interface Listener<Effect>","description":"org.rekotlin.Listener","location":"rekotlin/org.rekotlin/-listener/index.html","searchKeys":["Listener","interface Listener<Effect>","org.rekotlin.Listener"]},{"name":"interface RootStore<State> : Store<State> ","description":"org.rekotlin.RootStore","location":"rekotlin/org.rekotlin/-root-store/index.html","searchKeys":["RootStore","interface RootStore<State> : Store<State> ","org.rekotlin.RootStore"]},{"name":"interface Store<State> : DispatchStore, SubscribeStore<State> ","description":"org.rekotlin.Store","location":"rekotlin/org.rekotlin/-store/index.html","searchKeys":["Store","interface Store<State> : DispatchStore, SubscribeStore<State> ","org.rekotlin.Store"]},{"name":"interface SubscribeStore<State>","description":"org.rekotlin.SubscribeStore","location":"rekotlin/org.rekotlin/-subscribe-store/index.html","searchKeys":["SubscribeStore","interface SubscribeStore<State>","org.rekotlin.SubscribeStore"]},{"name":"interface Subscriber<State>","description":"org.rekotlin.Subscriber","location":"rekotlin/org.rekotlin/-subscriber/index.html","searchKeys":["Subscriber","interface Subscriber<State>","org.rekotlin.Subscriber"]},{"name":"interface Thunk<State> : Action","description":"org.rekotlin.Thunk","location":"rekotlin/org.rekotlin/-thunk/index.html","searchKeys":["Thunk","interface Thunk<State> : Action","org.rekotlin.Thunk"]},{"name":"object ReKotlinInit : Action","description":"org.rekotlin.ReKotlinInit","location":"rekotlin/org.rekotlin/-re-kotlin-init/index.html","searchKeys":["ReKotlinInit","object ReKotlinInit : Action","org.rekotlin.ReKotlinInit"]},{"name":"open operator fun <ChildState> plus(childReducer: Reducer<ChildState>): Store<Pair<State, ChildState>>","description":"org.rekotlin.RootStore.plus","location":"rekotlin/org.rekotlin/-root-store/plus.html","searchKeys":["plus","open operator fun <ChildState> plus(childReducer: Reducer<ChildState>): Store<Pair<State, ChildState>>","org.rekotlin.RootStore.plus"]}]
